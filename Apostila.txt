Apostila de Python
Autor: Cainã

1:
acessar o repositorio no github:
https://github.com/kkaldas/pyStuff

2:
Acessar o site Rextester e escolher a linguagem Python
https://rextester.com/l/python3_online_compiler
mas para exercícios com input() sugiro:
https://repl.it/languages/python3

3:
Verificar no repositorio o arquivo helloPython, ou algo parecido. E partiu falar sobre ele

4:
Verificar o arquivo sobre matemática.. acho que eh math.py e conversarmos sobre ele

4.1:
Fazer exercícios 0, 0.1, 0.2, 0.3, 0.4, 0.5 e 0.6

5:
Verificar o arquivo conditionals.py e conversarmos

5.1:
Faazer exercícios 0.7 e 0.8, 1 e 1.1

6:
Verificar o arquivo sobre input e conversarmos
note que quando se usa a função input() no rextester, tem que digitar o
que foi pedido antes de executar o programa numa text box que tem ali entre o codigo
e o console. Se não, dá erro.

6.1: Fazer exercício 3

7:
Verificar o arquivo loops e conversarmos

7.1: Fazer exercícios 2.-2 e 2.-1

8: Verificar o arquivo vectors.py e conversarmos

8.1: Fazer todos os itens do exercício 5

9: Verificar o arquivo functions.py e conversarmos

9.1: Fazer todos os itens do exercício 6

10: Verificarmos o arquivo classes.py e moreClasses.py e conversarmos

10.1: Fazer todos os itens do exercício 7

obs: recomendo estudar o item 12 antes do 11 porque considero mais importante.
11: Verificarmos o arquivo delegates.py e conversarmos

11.1: Fazer todos os itens do exercício 8

12: Verificarmos o arquivo dictionary.py e conversarmos

13: Máquina de Estados. Ainda não upei arquivo sobre isso.
13.1 Fazer exercício 9

14 Git
Comandos ensinados (16/04/2019):
git clone <link do repositorio online>
git add .
git commit -m "escreva aqui as alterações feitas"
git push
git status
git log
git log --oneline
mostra todos os commits que ja foram feitos
git checkout <codigo do commit>
git checkout master
(o git checkout master volta pro estado atual do projeto)
git pull
(baixa atualizações do repositório online para o seu PC)


Exercícios:

<math.py>
Exercício 0: implemente o seguinte código C# em Python
Para converter explicitamente para string, faça: str(variavel)

    string text = "meutexto";
    int meuInt = 4;
    float meuFloat = 3.5f;
    bool meuBool = true;

    Console.WriteLine(text + " " + meuInt
                      + " " + meuFloat + " "
                     + " " + meuBool);

Exercício 0.1: <math.py>
criar uma variável chamada ataque, e uma chamada defesa. Então imprimir uma
mensagem informando o dano. Considere o dano igual a ataque menos defesa.

<math.py>
exercício 0.2:
Imagine que o personagem do "Exercício 0.1" conseguiu um acerto crítico em
seu ataque. Em caso de acerto crítico, o ataque deve ser multiplicado por uma
variável chamada crit para o cálculo do dano. Responda com o código informando
o dano nesse caso de acerto crítico. Crit pode valer 2, ou 3, por exemplo.

<math.py>
exercício 0.3:
Suponha que um personagem anda 3 metros por turno.
Faça um programa que calcule quantos metros esse personagem pode andar em
x turnos, sendo x uma variável.

<math.py>
exercício 0.4:
Suponha que um personagem está carregando uma espada, um escudo, sua armadura,
e mais alguns itens que você deve inventar. Faça um programa que some o peso
e o imprima.

<math.py>
exercício 0.5:
Imagine que um personagem está carregando x maçãs, sendo que cada maçã tem um
peso y. Faça um programa que calcule o peso que o personagem está carregando,
de acordo com x e y, e imprima o resultado.

<math.py>
exercício 0.6:
complete o código em Python:

ataque1 = "choque do trovao"
ataque2 = #completar
ataque3 = #completar

personagem1 = "pikachu"
personagem2 = #completar
personagem3 = #completar

fraseAcao1 = " atacou usando "
fraseAcao2 = #completar

print (personagem1 + fraseAtaque + ataque1)
#abaixo, exercitar a concatenação imprimindo frases que combinem ataques,
#personagens e frases de ação.
print (#completar)
print (#completar)
print (#completar)
print (#completar)

<conditionals.py>
Exercício 0.7:
modifique os valores das variáveis no script de maneira que ele sempre imprima
a fase certa e nunca imprima a frase errada. Não faça nenhuma alteração além de
modificar os valores das variáveis.

yeah = "frase certa"
nope = "frase errada"

#alterar
x = 3
y = 9

if ( x < y ):
  print(yeah)

#alterar
x = 9
y = 9

if ( x <= y ):
  print(nope)
else:
  print(yeah)

x = 7 #alterar

if ( x < 10 ):
  print(nope)
elif (x < 11):
  print(yeah)
else:
  print(nope)

<conditionals.py>
exercício 0.8:
modifique os valores das variáveis no script de maneira que ele sempre imprima
a fase certa e nunca imprima a frase errada. Não faça nenhuma alteração além de
modificar os valores das variáveis.
yeah = "frase certa"
nope = "frase errada"

x = 1 #alterar

if (x < 27 or x > 27):
  print(nope)
else:
  print(yeah)

x = 13 #alterar

if ( x/42 == 1 and x != "peixe"):
  print(yeah)
else:
  print(nope)

variavelBooleana = False

if (variavelBooleana):
  print(yeah)
else:
  print(nope)

maisUmaVar = True and False

if (variavelBooleana and maisUmaVar):
  print(yeah)
else:
  print(nope)

peixe = 5
if (2 + 2 == peixe):
  print(yeah)
else:
  print(nope)

quandoTerminarVoceVaiColarSeusCodigosNaSuaPastaDoDrive = "Talvez"

if (quandoTerminarVoceVaiColarSeusCodigosNaSuaPastaDoDrive != "sim!"):
  print(nope)
else:
  print(yeah)

<conditionals.py>
Exercício 1
1.0
Crie uma variável chamada num. Faça um programa que, dependendo do valor de num,
imprima informando se num é um valor negativo, nulo ou positivo.

<conditionals.py>
1.1
Faça o programa da 1.0, além de se o número é positivo, negativo ou nulo,
também se o mesmo número é expressivo ou inexpressivo.
Expressivo -> maior que 500 ou menor que -500.
Caso esteja entre -500 e 500 é considerado inexpressivo.

<loops.py>
Exercício 2.-2
faça um programa que imprima a frase "ajuda aqui professor" quinhentas mil vezes.

<loops.py>
Exercício 2.-1
Crie uma variável chamada i.
Faça um programa que imprima a seguinte frase, i vezes:
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"

<loops.py> <userInput.py>
Exercício 2 (obs: não faça esse no rextester. faça em
https://repl.it/languages/python3 - 02/03/2019, ou no Python instalado no seu PC)
Faça um programa que pergunte:
Era uma vez um gato chinês. Quer que eu conte outra vez?
Caso o usuário digite sim ou qualquer outra coisa não prevista, imprima de novo a frase do gato. Caso o usuário digite nao, finalize a execução.

<userInput.py>
Exercício 3 (usar método input)
Faça um programa que pede a altura e a largura de um retângulo e imprima sua área.
(área = altura * largura)

<userInput.py> <loops.py> <math.py(concatenação)>
Exercício 4
Faça um programa que pede ao usuário a altura e a largura. Então imprima um retângulo de asteriscos com a altura e a largura digitadas.
Exemplo para altura 4 e largura 3:
***
***
***
***

<userInput.py> <loops.py> <math.py(concatenação)>
Exercício 4.1
Faça um programa que imprima um retângulo nos mesmos princípios do exercício 4,
no entanto, o retângulo deve ser ôco, não contendo asteriscos no interior. Ou
seja, deve conter apenas os asteriscos externos, da borda. Exemplo para altura
e largura iguais a 4:
****
*  *
*  *
****

<vectors.py>
Exercício 5:
Criar uma variável chamada inventario que guarda uma lista, ou vetor, com alguns itens do tipo string. Por exemplo "espada",
"escudo", "armadura", "laranjas", "morangos". Então imprima a lista toda com um único comando

<vectors.py>
Exercício 5.1
Use a lista (ou vetor) do exercício 5, mas, ao invés de imprimir o vetor todo, imprima apenas o primeiro e o último item

<vectors.py>
Exercício 5.2
Reutilize a lista chamada inventario do exercício 5, imprima ela toda com um comando, depois, dê um comando para modificar
um dos itens por um item melhorado. Por exemplo: substituir "espada" por "espada melhorada de fogo boladona". Então imprima
novamente toda a lista, e, faça mais uma vez! Ou seja, acesse mais um item da lista (lista[2] = lista[2] + "melhorada boladona")
e imprima novamente toda a lista.

<vectors.py>
Exercício 5.3
Crie uma lista, imprima ela toda em um comando, então modifique seu último elemento usando a função len(nomeDaSuaLista)
Ela retorna o tamanho da lista, mas para acessar o último elemento, tens que fazer algo como lista[len(lista) -1]

<vectors.py> <loops.py>
Exercício 5.4
faça uma lista com vários números inteiros, então calcule o produtório deles e imprima o resultado.
Use um laço de repetição de maneira que o programa funcione não importando o tamanho da lista
Produtório significa multiplicar todos os elementos, tipo lista[0] * lista[1] * ... * lista[len(list) -1]

<vectors.py> <loops.py>
Exercício 5.5:
Crie uma lista de coisas para um heroi fazer, para o primeiro elemento use: "domar um dragao", depois,
sugiro coisas como "resgatar uma princesa da torre", "salvar um vilarejo de um ataque de orcs"
crie uma variável chamada acabeiDeFazer = "domar um dragao"
Percorra a lista com um while ou for, verificando para cada elemento, se ele é igual à variavel acabeiDeFazer
Caso seja igual, substitua o elemento no vetor pelo texto: "Ja fiz"
depois, mude o valor da variável acabeiDeFazer para outra coisa de herói para fazer da lista,
copie e cole o while depois dessa alteração, de maneira que ele substitua mais uma coisa por "Ja fiz"

<functions.py>
Exercício 6:
Crie uma variável ataque = 10, e uma variável defesa = 5, então crie uma função que imprima o dano, seja dano = ataque - defesa.
E chame a função!

Exercício 6.1:
Crie uma função similar à do Exercício 6 que, ao invés de imprimir o dano, retorne o dano com o comando return,
e use o valor retornado para imprimir o dano.

<functions.py>
Exercício 6.2:
Crie uma função chamada DobreAMeta que receba um argumento chamado meta, e retorne o seu valor multiplicado por 2.
chame essa função dentro de um comando print, passando como argumento um numero inteiro. Lembre-se de converter para texto
com str()

<functions.py> <loops.py>
Exercício 6.3:
Crie uma função chamada VerificaSeMorreu, que recebe um argumento chamado vida, e caso vida seja menor ou igual a 0, imprima
"O personagem morreu". Coloque essa função em dentro de um while que vá tirando um de vida a cada iteração. Daí quando a vida for
menor ou igual a zero, ele não repete mais, finalizando a execução do programa.

<functions.py> <conditionals.py>
Exercício 6.4
Crie uma função que receba dois argumentos: nivelPersonagem1 e nivelPersonagem2, e imprima "o personagem 1 tem o maior nivel" ou
"o personagem 2 tem o maior nivel" dependendo do valor desses argumentos. Caso sejam iguais, imprima: "personagens de mesmo nivel"

<classes.py>
Exercício 7.0
Crie uma classe chamada Guerreiro, com os atributos ataque, defesa e vida.
Instancie dois guerreiros, um chamado Saitama e um chamado Goku.
simule um ataque do Saitama no Goku e um ataque do Goku no Saitama, imprimindo a mensagem que informa do ataque,
e a vida dos personagens antes e depois dos doie eventos.
Obs: pode personalizar de maneira que você ache que faça sentido a matemática envolvida no ataque.

<classes.py>
Exercício 7.1
transforme a lógica de ataque em um método para a classe Guerreiro, do exercício 7.0. O método deve receber o
Guerreiro que está sendo atacado como parâmetro (argumento).

<classes.py><loops.py>
Exercício 7.2
Crie uma classe chamada Sala, que contém os atributos Descricao, Monstro, Tesouro, salaAcima e salaAbaixo
Instancie três salas: salaBaixo, salaMeio e salaTopo, e conecte elas através de definir que:
1- o atributo salaAcima do objeto salaBaixo é a salaMeio
2- o atributo salaAbaixo da salaMeio é o objeto salaBaixo
3- o atributo salaAcima do objeto salaMeio é o objeto salaTopo
4- o atributo salaAbaixo do objeto salaTopo é o objeto salaMeio
Crie um programa que dá as boas vindas ao jogador, então imprime a descrição, Monstro e Tesouro da salaBaixo, e pergunta
para o jogador se ele quer ir para "cima", para "baixo" ou se quer "encerrar". Depois de coletar esse input, o programa
deve gerenciar a movimentação do jogador entre as três salas, para cada sala visitada imprimindo a Descrição, o Monstro e o Tesouro.

<classes.py>
Exercício 7.3
Adicione mais uma funcionalidade divertida ao exercício 7.2, mas procure colocar a lógica em métodos de classes.
Não coloque muita lógica fora das classes. Algo que poderia ser feito seria criar uma classe Personagem, que tem um
atributo inventario, e adicionar o método ColetaTesouro, que transfere o tesouro da sala para o inventário.
Daí tem que dar a opção do player fazer isso também né.

<classes.py>
Exercício 7.4
Crie uma classe chamada Personagem, que tem os atributos: vida, mana, velocidade, e o método Andar(), que imprime:
"o personagem andou " + str(velocidade) + " metros."
Crie uma classe chamada Cavaleiro, que extende Personagem e possui o atributo velocidadeMontado, e os métodos:
MontarNoCavalo() e DesmontarDoCavalo().
Crie uma lógica para que, quando um cavaleiro esteja montado, o método Andar use a velocidade dele montado, e não a normal.
Mas quando ele não estiver montado, use a velocidade normal. Não altere a classe Personagem para isso: apenas a Cavaleiro.

<delegates.py><classes.py>
Exercício 8
Pensei em escrever para os meus alunos:
Criem uma classe Personagem, que tenha um atributo strength (força) e um atributo atk (de ataque), que seja um delegate.
Criem uma classe Arma, que possui um atributo do tipo Personagem, e um atributo atk, que seja usado para substituir
o atributo atk do personagem quando esse personagem equipa ela. Extendam essa Classe com uma chamada Espada, que dê
mais atk que a classe Arma, e use um fator aleatório para o cálculo.
Depois, instanciem um objeto Personagem e um Espada, equipem a espada no personagem, e printem o atk.
Mas ficou meio complexo, então eu fiz isso tudo, e estou expondo abaixo:

from random import randint

class Arma:
    def __init__ (self, personagemEquipando = "nenhum"):
        if (personagemEquipando == "nenhum"):
            personagemEquipando = Personagem()
        self.personagem = personagemEquipando
    def atk(self, personagem):
        return personagem.strength

class Espada(Arma):
    def atk(self):
        return self.personagem.strength + 3 + randint(1,8)

class Clava(Arma):
    def atk(self):
        return self.personagem.strength + 5 + randint(1,4)

class Personagem:
    def __init__ (self, vvida = 10, vstrength = 5, vdefesa = 4):
        self.vida = vvida
        self.strength = vstrength
        desarmado = Arma(self)
        self.atk = desarmado.atk
        self.defesa = vdefesa

    def equipar(self, arma):
        arma.personagem = self;
        self.atk = arma.atk

cacildo = Personagem(15, 3)
espada = Espada()
cacildo.equipar(espada)

print(cacildo.atk())

clava = Clava()
cacildo.equipar(clava)
print(cacildo.atk())

Continuando exercício 8...
Então, vou pedir primeiramente para vocês olharem esse código, testarem, entenderem ele, e então criar mais uma arma, além da
Espada e da Clava e printarem o dano dela.

<classes.py><delegates.py>
Exercício 8.1
Adicionar a seguinte função à classe Personagem, do exercício 8:
    def atacar(self, atacado):
        dmg = atacado.defender(self.atk())
        if (dmg > 0):
            atacado.vida = atacado.vida - dmg
Então continuem o código adicionando um sistema de armaduras similar ao sistema usado para as armas, no qual a
armadura equipada define como será realizada a defesa, e qual será o dano retornado.
Duas formas requeridas de defesa: 
sem armadura (daí toma o dano todo), mas tem uma possibilidade de esquivar-se, o que implica em dano zero.
com escudo mágico: caso o dano inflingido seja menor do que a defesa base do escudo, o ataque cura o atacado ao
invés de só ser bloqueado.

Exercício 9
Implemente uma máquina de estados simulando um combate. Detalhes da implementação ficam a seu critério.

<userInput.py> <math.py>
Exercício avançado que Cainã não recomenda aos alunos fazerem
Exercício 1000
Faça um programa que recebe por input 2 pontos (x1,y1) e (x2,y2) de um imaginário plano cartesiano,
e imprima a sua equação da reta no formato: y = mx + n.
m =(y2 – y1) / (x2 – x1)
n = y1 - m*x1
Testá-la com algum web app ou usando a matemática mesmo.
web app: https://pt.symbolab.com/solver/line-equation-calculator/reta%20%5Cleft(2%2C3%5Cright)%20%5Cleft(3%2C5%5Cright)
